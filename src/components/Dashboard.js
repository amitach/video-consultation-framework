import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Users, MessageSquare, Activity, Database, Settings, Play, BarChart3, Clock, CheckCircle, AlertTriangle } from 'lucide-react';
export const Dashboard = ({ persona, conversations, onStartConversation, }) => {
    const [stats, setStats] = useState({
        totalConversations: 0,
        activeConversations: 0,
        completedConversations: 0,
        averageDuration: 0,
        dataExtractionRate: 0,
        integrationSuccessRate: 0,
    });
    useEffect(() => {
        // Calculate statistics
        const total = conversations.length;
        const active = conversations.filter(c => c.status === 'active').length;
        const completed = conversations.filter(c => c.status === 'completed').length;
        const completedConversations = conversations.filter(c => c.status === 'completed');
        const avgDuration = completedConversations.length > 0
            ? completedConversations.reduce((sum, c) => {
                if (c.endTime) {
                    return sum + (new Date(c.endTime).getTime() - new Date(c.startTime).getTime());
                }
                return sum;
            }, 0) / completedConversations.length / 1000 / 60 // Convert to minutes
            : 0;
        const successfulExtractions = conversations.filter(c => c.extractedData.patientInfo.firstName && c.extractedData.patientInfo.lastName).length;
        const extractionRate = total > 0 ? (successfulExtractions / total) * 100 : 0;
        const successfulIntegrations = conversations.filter(c => c.integrationStatus.ehrIntegration === 'success' ||
            c.integrationStatus.crmIntegration === 'success').length;
        const integrationRate = total > 0 ? (successfulIntegrations / total) * 100 : 0;
        setStats({
            totalConversations: total,
            activeConversations: active,
            completedConversations: completed,
            averageDuration: avgDuration,
            dataExtractionRate: extractionRate,
            integrationSuccessRate: integrationRate,
        });
    }, [conversations]);
    const StatCard = ({ title, value, icon, color, subtitle }) => (_jsx("div", { className: "bg-white rounded-lg shadow-sm border border-healthcare-200 p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-healthcare-600", children: title }), _jsx("p", { className: `text-2xl font-bold ${color}`, children: value }), subtitle && _jsx("p", { className: "text-xs text-healthcare-500 mt-1", children: subtitle })] }), _jsx("div", { className: `p-3 rounded-full ${color.replace('text-', 'bg-').replace('-600', '-100')}`, children: icon })] }) }));
    return (_jsxs("div", { className: "space-y-6", children: [_jsx("div", { className: "bg-white rounded-lg shadow-sm border border-healthcare-200 p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("div", { className: "w-16 h-16 bg-primary-500 rounded-full flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold text-xl", children: persona.name.split(' ').map(n => n[0]).join('') }) }), _jsxs("div", { children: [_jsx("h1", { className: "text-2xl font-bold text-healthcare-800", children: persona.name }), _jsx("p", { className: "text-healthcare-600", children: persona.description }), _jsxs("div", { className: "flex items-center space-x-4 mt-2", children: [_jsx("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${persona.status === 'active'
                                                        ? 'bg-green-100 text-green-800'
                                                        : 'bg-yellow-100 text-yellow-800'}`, children: persona.status }), _jsxs("span", { className: "text-sm text-healthcare-500", children: ["ID: ", persona.id] })] })] })] }), _jsxs("div", { className: "flex space-x-3", children: [_jsxs("button", { onClick: onStartConversation, className: "bg-primary-500 text-white px-6 py-3 rounded-lg hover:bg-primary-600 transition-colors flex items-center space-x-2", children: [_jsx(Play, { className: "w-5 h-5" }), _jsx("span", { children: "Start Conversation" })] }), _jsxs("button", { className: "bg-healthcare-100 text-healthcare-700 px-6 py-3 rounded-lg hover:bg-healthcare-200 transition-colors flex items-center space-x-2", children: [_jsx(Settings, { className: "w-5 h-5" }), _jsx("span", { children: "Settings" })] })] })] }) }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: [_jsx(StatCard, { title: "Total Conversations", value: stats.totalConversations, icon: _jsx(MessageSquare, { className: "w-6 h-6" }), color: "text-primary-600" }), _jsx(StatCard, { title: "Active Sessions", value: stats.activeConversations, icon: _jsx(Activity, { className: "w-6 h-6" }), color: "text-green-600" }), _jsx(StatCard, { title: "Completed", value: stats.completedConversations, icon: _jsx(CheckCircle, { className: "w-6 h-6" }), color: "text-blue-600" }), _jsx(StatCard, { title: "Avg Duration", value: `${stats.averageDuration.toFixed(1)}m`, icon: _jsx(Clock, { className: "w-6 h-6" }), color: "text-purple-600" }), _jsx(StatCard, { title: "Data Extraction", value: `${stats.dataExtractionRate.toFixed(1)}%`, icon: _jsx(Database, { className: "w-6 h-6" }), color: "text-orange-600", subtitle: "Success rate" }), _jsx(StatCard, { title: "Integration Success", value: `${stats.integrationSuccessRate.toFixed(1)}%`, icon: _jsx(BarChart3, { className: "w-6 h-6" }), color: "text-teal-600", subtitle: "EHR/CRM sync" })] }), _jsxs("div", { className: "bg-white rounded-lg shadow-sm border border-healthcare-200", children: [_jsx("div", { className: "p-6 border-b border-healthcare-200", children: _jsx("h2", { className: "text-lg font-semibold text-healthcare-800", children: "Recent Conversations" }) }), _jsxs("div", { className: "divide-y divide-healthcare-200", children: [conversations.slice(0, 5).map((conversation) => (_jsxs("div", { className: "p-6 hover:bg-healthcare-50 transition-colors", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("div", { className: "w-10 h-10 bg-healthcare-200 rounded-full flex items-center justify-center", children: _jsx(Users, { className: "w-5 h-5 text-healthcare-600" }) }), _jsxs("div", { children: [_jsxs("p", { className: "font-medium text-healthcare-800", children: [conversation.extractedData.patientInfo.firstName || 'Unknown', ' ', conversation.extractedData.patientInfo.lastName || 'Patient'] }), _jsx("p", { className: "text-sm text-healthcare-600", children: new Date(conversation.startTime).toLocaleString() })] })] }), _jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${conversation.status === 'completed'
                                                            ? 'bg-green-100 text-green-800'
                                                            : conversation.status === 'active'
                                                                ? 'bg-blue-100 text-blue-800'
                                                                : 'bg-red-100 text-red-800'}`, children: conversation.status }), _jsxs("div", { className: "flex items-center space-x-2", children: [conversation.integrationStatus.ehrIntegration === 'success' && (_jsx(CheckCircle, { className: "w-4 h-4 text-green-500" })), conversation.integrationStatus.crmIntegration === 'success' && (_jsx(CheckCircle, { className: "w-4 h-4 text-blue-500" })), (conversation.integrationStatus.ehrIntegration === 'failed' ||
                                                                conversation.integrationStatus.crmIntegration === 'failed') && (_jsx(AlertTriangle, { className: "w-4 h-4 text-red-500" }))] })] })] }), conversation.extractedData.symptoms.primarySymptoms.length > 0 && (_jsx("div", { className: "mt-3 ml-14", children: _jsxs("p", { className: "text-sm text-healthcare-600", children: [_jsx("span", { className: "font-medium", children: "Symptoms:" }), ' ', conversation.extractedData.symptoms.primarySymptoms.join(', ')] }) }))] }, conversation.id))), conversations.length === 0 && (_jsxs("div", { className: "p-12 text-center", children: [_jsx(MessageSquare, { className: "w-12 h-12 text-healthcare-300 mx-auto mb-4" }), _jsx("p", { className: "text-healthcare-600", children: "No conversations yet" }), _jsx("p", { className: "text-sm text-healthcare-500 mt-1", children: "Start your first conversation to see data here" })] }))] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "bg-white rounded-lg shadow-sm border border-healthcare-200 p-6", children: [_jsx("h3", { className: "text-lg font-semibold text-healthcare-800 mb-4", children: "Conversation Flow" }), _jsx("div", { className: "space-y-3", children: persona.conversationConfig.conversationFlow.slice(0, 6).map((flow, index) => (_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-6 h-6 bg-primary-100 text-primary-600 rounded-full flex items-center justify-center text-xs font-medium", children: index + 1 }), _jsx("span", { className: "text-sm text-healthcare-700 capitalize", children: flow.stage.replace('-', ' ') })] }, flow.id))) })] }), _jsxs("div", { className: "bg-white rounded-lg shadow-sm border border-healthcare-200 p-6", children: [_jsx("h3", { className: "text-lg font-semibold text-healthcare-800 mb-4", children: "Personality Traits" }), _jsx("div", { className: "space-y-3", children: Object.entries(persona.conversationConfig.personality).map(([trait, value]) => (_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-healthcare-700 capitalize", children: trait }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("div", { className: "w-20 bg-healthcare-200 rounded-full h-2", children: _jsx("div", { className: "bg-primary-500 h-2 rounded-full", style: { width: `${(value / 10) * 100}%` } }) }), _jsxs("span", { className: "text-xs text-healthcare-600 w-6", children: [value, "/10"] })] })] }, trait))) })] })] })] }));
};
